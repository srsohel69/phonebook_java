/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ttaiit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
//import java.awt.event.*;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;

//import javax.swing.*;


/**
 *
 * @author Sohel
 */
public class PTable extends javax.swing.JFrame {

    private Connection conn;
    private Statement st;
    private ResultSet rs;
    DefaultTableModel model;
    //String query;
    
    
    
    public PTable() {
        initComponents();
        getTableData();
        CreateColumns();
        //try{
          //  Class.forName("com.mysql.jdbc.Driver");
            //con=DriverManager.getConnection("jdbc:mysql://localhost:3306/test","root","");
            //st=con.createStatement();
        //}
        //catch(Exception ex){
          //  System.out.println("Error:"+ex);
        //}
        
    }
    private void CreateColumns(){
        model.addColumn("nam"
                + ""
                + "e");
        model.addColumn("category");
        model.addColumn("mobile");
    }
    private void Populate(String tfName,String cbCategory,String tfMobile){
        String[]rowData={tfName,cbCategory,tfMobile};
        model.addRow(rowData);
    }
    
    private void getTableData(){
        Connection conn=null;
        Statement st=null;
        try{
            conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost/project_db","root","");
            st = conn.createStatement();
            String sql="SELECT * FROM users";
            ResultSet rs = st.executeQuery(sql);
            DefaultTableModel model = new DefaultTableModel(new String[]{"name", "category", "mobile"}, 0);
        
        while(rs.next())
            {
                String col1 = rs.getString("name");
                String col2 = rs.getString("category");
                String col3 = rs.getString("mobile");                
                              
                model.addRow(new Object[]{col1, col2, col3});
            }
         tblContact.setModel(model);
        }
        catch(Exception ex){
    
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    } 
    
     public void theQuery(String query){
        Connection conn=null;
        Statement st=null;
        try{
            conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost/project_db","root","");
            st = conn.createStatement();
            st.executeUpdate(query);
            JOptionPane.showMessageDialog(null, "Congratulations!! The operation done successfully.");
            refreshMethod();
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
     
      
     
      private void refreshMethod(){
        tfName.setEditable(true);
        IMessage.setText("");
        tfName.setText("");
        //cbCategory.setText("");
        tfMobile.setText("");
        cbCategory.setSelectedItem("Family");
        getTableData(); 
    }
         

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblContact = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbCategory = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        tfMobile = new javax.swing.JTextField();
        bAdd = new javax.swing.JButton();
        bUpdate = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        IMessage = new javax.swing.JLabel();
        bRefresh = new javax.swing.JButton();
        txt_search = new javax.swing.JTextField();
        cb_search = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblContact.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Category", "Mobile"
            }
        ));
        tblContact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblContactMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblContact);

        jLabel1.setText("Name:");

        jLabel2.setText("Category");

        cbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Family", "Friend", "Siblings" }));

        jLabel3.setText("Mobile");

        bAdd.setText("Add");
        bAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddActionPerformed(evt);
            }
        });

        bUpdate.setText("Update");
        bUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUpdateActionPerformed(evt);
            }
        });

        bDelete.setText("Delete");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        IMessage.setForeground(new java.awt.Color(255, 0, 0));

        bRefresh.setText("Refresh");
        bRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRefreshActionPerformed(evt);
            }
        });

        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchKeyReleased(evt);
            }
        });

        cb_search.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Family", "Friends", "Siblings" }));
        cb_search.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_searchItemStateChanged(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3))
                            .addGap(39, 39, 39)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cbCategory, 0, 198, Short.MAX_VALUE)
                                .addComponent(tfMobile)
                                .addComponent(tfName)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(IMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(bRefresh)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bAdd)
                        .addGap(29, 29, 29)
                        .addComponent(bUpdate)
                        .addGap(34, 34, 34)
                        .addComponent(bDelete)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(cb_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(191, 191, 191))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tfMobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(cb_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bAdd)
                            .addComponent(bUpdate)
                            .addComponent(bDelete))
                        .addGap(28, 28, 28)
                        .addComponent(bRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(173, 173, 173))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddActionPerformed
      //IMessage.setText("");
      //DefaultTableModel model=(DefaultTableModel)tblContact.getModel();
      //if(!tfName.getText().equals("")){
          //theQuery("insert into users (name,category,mobile)values("+tfName.getText()+",'"+cbCategory.getSelectedItem()+"','"+tfMobile.getText()+"'"+")");
        //  model.addRow(new Object[]{tfName.getText(),cbCategory.getSelectedItem().toString(),tfMobile.getText()});
      //}
      //else{
        //  IMessage.setText("Name should not be left blank");
      //}
      
      try{
        IMessage.setText("");
        if(!tfName.getText().equals("") && !tfMobile.getText().equals("")){
            theQuery("insert into users (name,category,mobile)values('"+tfName.getText()+"','"+cbCategory.getSelectedItem()+"','"+tfMobile.getText()+"'"+")");
        }
        else{
            IMessage.setText("You must need to fill ID, Name & Age fields!!");
        }
    }catch(Exception ex){
        JOptionPane.showMessageDialog(null, ex.getMessage());
    }
      Populate(tfName.getText(),cbCategory.getSelectedItem().toString(),tfMobile.getText());
      tfName.setText("");
      cbCategory.setSelectedItem("");
      tfMobile.setText("");
    }//GEN-LAST:event_bAddActionPerformed

    private void bUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUpdateActionPerformed
      if(tblContact.getSelectedRow()==-1){
        if(tblContact.getSelectedRow()==0){
            IMessage.setText("Table is empty!!");
        }
        else{
             IMessage.setText("You need to select an user");
        }
    }    
    else{
        tfName.setEditable(false);
        int selectedRowIndex = tblContact.getSelectedRow();        
        if(tfName.getText().equals("") && tfMobile.getText().equals("")){
            tfName.setText(tblContact.getModel().getValueAt(selectedRowIndex, 0).toString());
            tfMobile.setText(tblContact.getModel().getValueAt(selectedRowIndex, 1).toString());
            cbCategory.setSelectedItem(tblContact.getModel().getValueAt(selectedRowIndex, 3).toString()); 
        }
        else if(!tfName.getText().equals(tblContact.getModel().getValueAt(selectedRowIndex, 0).toString())||
                !tfMobile.getText().equals(tblContact.getModel().getValueAt(selectedRowIndex, 0).toString())){            
            theQuery("update users set mobile='"+tfMobile.getText()+"',category='"+cbCategory.getSelectedItem()+"' where name="+tfName.getText());
        }
        else{
            IMessage.setText("You dont't update the value!!");
        }
    }
    
       
              
    }//GEN-LAST:event_bUpdateActionPerformed

    private void tblContactMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblContactMouseClicked
        DefaultTableModel model=(DefaultTableModel)tblContact.getModel();
        tfName.setText(model.getValueAt(tblContact.getSelectedRow(),0).toString());
        cbCategory.setSelectedItem(model.getValueAt(tblContact.getSelectedRow(),1).toString());
        tfMobile.setText(model.getValueAt(tblContact.getSelectedRow(),2).toString());
    }//GEN-LAST:event_tblContactMouseClicked

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
        DefaultTableModel model=(DefaultTableModel)tblContact.getModel();
        if(tblContact.getSelectedRow()==-1){
          if(tblContact.getSelectedRow()==0){
              IMessage.setText("Table is empty");
          }
          else{
              IMessage.setText("You must select a contact");
          }
      }
      else{
            //try{
              //  conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost/project_db","root","");
                //st = conn.createStatement();
                //if (tblContact.getSelectedRow() != -1) {
            // remove selected row from the model
            //model.removeRow(tblContact.getSelectedRow());
                //}
               // model.removeRow(tblContact.getSelectedRow());
                //int selectedRowIndex = tblContact.getSelectedRow();
              //  String query="delete from users where name=''";
                //st.executeUpdate(query);
                //System.out.println("delete!");
            //}
            //catch(Exception ex){
              //  System.out.println("not delete");
            //}
            //model.removeRow(tblContact.getSelectedRow());
            int selectedRowIndex = tblContact.getSelectedRow();
            theQuery("DELETE FROM users WHERE name='"+tblContact.getModel().getValueAt(selectedRowIndex,0)+"'");
            
      
       
        }
     
    
    
        
       
        
        
             
        
    
    
    
        
      
    }//GEN-LAST:event_bDeleteActionPerformed
    
    private void bRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRefreshActionPerformed
        refreshMethod();
        getTableData();
    }//GEN-LAST:event_bRefreshActionPerformed

    private void txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyReleased
        try{
           //theQuery(); 
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null,ex.getMessage());
        }
    }//GEN-LAST:event_txt_searchKeyReleased

    private void cb_searchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_searchItemStateChanged
        String query=cb_search.getSelectedItem().toString();
        //DefaultTableModel model = new DefaultTableModel(new String[]{"name", "category", "mobile"}, 0);
        //TableRowSorter<DefaultTableModel> tr=new  TableRowSorter<DefaultTableModel>(model);
        filter(query);
        
    }//GEN-LAST:event_cb_searchItemStateChanged

         private void filter(String query){
         //DefaultTableModel model=(DefaultTableModel)jtable.getModel();
         TableRowSorter<DefaultTableModel> tr=new TableRowSorter<DefaultTableModel>(model);
         jTable.setRowSorter(tr);
         if(query!="Siblings"){
             tr.setRowFilter(RowFilter.regexFilter(query));
         }
         else{
                 jTable.setRowSorter(tr);
                 }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new PTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IMessage;
    private javax.swing.JButton bAdd;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bRefresh;
    private javax.swing.JButton bUpdate;
    private javax.swing.JComboBox<String> cbCategory;
    private javax.swing.JComboBox<String> cb_search;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JTable tblContact;
    private javax.swing.JTextField tfMobile;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField txt_search;
    // End of variables declaration//GEN-END:variables
}
